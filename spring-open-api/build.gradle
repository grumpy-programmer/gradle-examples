plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.openapi.generator' version '6.0.0'
    id 'maven-publish'
    id 'java'
}

group = 'io.grumpy-programmer'
version = System.getenv('VERSION') ?: 'unknown'
sourceCompatibility = JavaVersion.VERSION_17

sourceSets {
    main {
        java {
            srcDir layout.buildDirectory.dir('generated/sources/api/java/main')
        }
    }
}

configurations {
    api
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    api group: 'io.grumpy-programmer', name: 'spring-open-api', version: 'unknown', classifier: 'api', ext: 'yaml'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                Node root = asNode()
                root.remove(root.get("dependencyManagement"))

            }
            artifact("${buildDir}/api/api.yaml") {
                classifier 'api'
                extension 'yaml'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

openApiGenerate {
    generatorName = 'spring'
    globalProperties = [
            'apis'  : '',
            'models': ''
    ]
    configOptions = [
            'sourceFolder'         : 'java/main',
            'interfaceOnly'        : 'true',
            'skipDefaultInterface' : 'true',
            'documentationProvider': 'none',
            'openApiNullable'      : 'false',
            'useBeanValidation'    : 'true',
    ]
    inputSpec = "${buildDir}/api/api.yaml"
    outputDir = "${buildDir}/generated/sources/api"

    apiPackage = 'io.grumpyprogrammer.example.spring.openapi.api'
    modelPackage = 'io.grumpyprogrammer.example.spring.openapi.api.dto'
}

tasks.register('openApiClean', Delete) {
    group = 'openapi tools'
    description = 'Clean generated Open API classes.'

    delete "${buildDir}/generated/sources/api"
}

tasks.named('openApiGenerate') {
    dependsOn tasks.named('copyOpenApiDependencies')
}

tasks.register('copyOpenApiDependencies', Copy) {
    from configurations.api, "${projectDir}/api"
    into "${buildDir}/api"
    rename '(.+)-.*-api.(.+)', '$1.$2'

    dependsOn configurations.api
}

tasks.register('copyOpenApiResources', Copy) {
    group = 'openapi tools'
    description = 'Copy Open API yaml to application static.'

    from "${buildDir}/api"
    into "${buildDir}/resources/main/static"

    dependsOn tasks.named('copyOpenApiDependencies')
}

tasks.named('processResources') {
    dependsOn tasks.named('copyOpenApiResources')
}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("jar") {
    enabled = false
}

tasks.named('publish') {
    dependsOn tasks.named('copyOpenApiDependencies')
}
