plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.openapi.generator' version '6.0.0'
    id 'java'
}

group = 'io.grumpy-programmer'
version = System.getenv('VERSION') ?: 'unknown'
sourceCompatibility = JavaVersion.VERSION_17

sourceSets {
    main {
        java {
            srcDir layout.buildDirectory.dir('generated/sources/api/java/main')
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

openApiGenerate {
    generatorName = 'spring'
    globalProperties = [
            'apis'  : '',
            'models': ''
    ]
    configOptions = [
            'sourceFolder'         : 'java/main',
            'interfaceOnly'        : 'true',
            'skipDefaultInterface' : 'true',
            'documentationProvider': 'none',
            'openApiNullable'      : 'false',
            'useBeanValidation'    : 'true',
    ]
    inputSpec = "${projectDir}/api/api.yml"
    outputDir = "${buildDir}/generated/sources/api"

    apiPackage = 'io.grumpyprogrammer.example.spring.openapi.api'
    modelPackage = 'io.grumpyprogrammer.example.spring.openapi.api.dto'
}

tasks.named('openApiGenerate') {
    finalizedBy tasks.named('openApiDtoClean')
}

tasks.register('openApiClean', Delete) {
    group = 'openapi tools'
    description = 'Clean generated Open API classes.'

    delete "${buildDir}/generated/sources/api"
}

tasks.register('openApiDtoClean', Delete) {
    group = 'openapi tools'
    description = 'Clean *AllOf DTO classes.'

    delete fileTree("${buildDir}/generated/sources/api") {
        include '**/*AllOf.java'
    }
}

tasks.register('openApiCopySpec', Copy) {
    group = 'openapi tools'
    description = 'Copy Open API yaml to application static.'

    from "${projectDir}/api"
    into "${buildDir}/resources/main/static"
}

tasks.named('processResources') {
    dependsOn tasks.named('openApiCopySpec')
}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("jar") {
    enabled = false
}
